name: Application Build & Deploy

on:
  push:
    branches: [ main ]
    paths: 
      - 'Dockerfile'
      - 'main.go'
      - '*.go'
      - 'k8s/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'main.go'
      - '*.go'
      - 'k8s/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: tasky
  EKS_CLUSTER_NAME: wiz-eks-cluster

jobs:
  security-scan:
    name: Security Scan Application
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t $ECR_REPOSITORY:$GITHUB_SHA .

      - name: Run Hadolint Dockerfile Linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy



  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build with proper platform for EKS
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Deploy to Kubernetes
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          # Update image tag in Kubernetes manifests
          find k8s/ -name "*.yaml" -exec sed -i "s|IMAGE_TAG_PLACEHOLDER|$IMAGE_TAG|g" {} \;
          find k8s/ -name "*.yaml" -exec sed -i "s|ECR_REGISTRY_PLACEHOLDER|$ECR_REGISTRY|g" {} \;
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/rbac.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Wait for deployment
          kubectl rollout status deployment/tasky -n tasky --timeout=300s

      - name: Verify deployment
        run: |
          echo "=== Pods Status ==="
          kubectl get pods -n tasky -o wide
          
          echo "=== Service Status ==="
          kubectl get svc -n tasky
          
          echo "=== Ingress Status ==="
          kubectl get ingress -n tasky
          
          echo "=== Application Logs ==="
          kubectl logs -n tasky deployment/tasky --tail=20
          
          echo "=== MongoDB Connection Test ==="
          kubectl logs -n tasky deployment/tasky | grep -i mongo || echo "No MongoDB logs found"